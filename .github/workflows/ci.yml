name: TechFest UI Components CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test UI Components
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Create package.json and install dependencies
      run: |
        npm init -y
        npm install http-server puppeteer
    
    - name: Start local server
      run: |
        npx http-server . -p 8080 &
        sleep 5
      
    - name: Run component tests
      run: |
        node -e "
        const puppeteer = require('puppeteer');
        (async () => {
          console.log('🚀 Starting TechFest UI Components Tests...');
          
          const browser = await puppeteer.launch({
            headless: 'new',
            args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage']
          });
          
          const page = await browser.newPage();
          
          try {
            console.log('📄 Loading page...');
            await page.goto('http://localhost:8080/techfest.html', { 
              waitUntil: 'networkidle0',
              timeout: 10000 
            });
            
            console.log('✅ Page loaded successfully');
            
            // Wait for components to load
            await page.waitForSelector('.modal-trigger', { timeout: 5000 });
            await page.waitForSelector('#myTabs', { timeout: 5000 });
            await page.waitForSelector('#myCarousel', { timeout: 5000 });
            
            console.log('✅ All components loaded');
            
            // Test modal functionality
            console.log('Testing modal...');
            await page.click('.modal-trigger');
            await page.waitForSelector('.modal-overlay.active', { timeout: 2000 });
            await page.keyboard.press('Escape');
            await page.waitForFunction(
              () => !document.querySelector('.modal-overlay.active'),
              { timeout: 2000 }
            );
            console.log('✅ Modal test passed');
            
            // Test tabs functionality
            console.log('Testing tabs...');
            await page.focus('.tab-button[aria-selected=\"true\"]');
            await page.keyboard.press('ArrowRight');
            console.log('✅ Tabs test passed');
            
            // Test carousel functionality
            console.log('Testing carousel...');
            await page.click('.next-button');
            console.log('✅ Carousel test passed');
            
            // Check unit test results
            console.log('Checking unit tests...');
            await page.waitForTimeout(3000);
            
            const testResults = await page.evaluate(() => {
              const testItems = document.querySelectorAll('.test-item');
              const passed = document.querySelectorAll('.test-pass');
              const failed = document.querySelectorAll('.test-fail');
              
              return {
                total: testItems.length,
                passed: passed.length,
                failed: failed.length
              };
            });
            
            console.log(\`📊 Unit Test Results: \${testResults.passed}/\${testResults.total} passed\`);
            
            if (testResults.failed > 0) {
              console.error(\`❌ \${testResults.failed} unit tests failed!\`);
              process.exit(1);
            }
            
            console.log('🎉 All tests passed successfully!');
            
          } catch (error) {
            console.error('❌ Test failed:', error.message);
            process.exit(1);
          } finally {
            await browser.close();
          }
        })();
        "

  deploy:
    needs: test
    runs-on: ubuntu-latest
    name: Deploy to GitHub Pages
    if: github.ref == 'refs/heads/main'
    
    # Add permissions for GitHub Pages deployment
    permissions:
      contents: read
      pages: write
      id-token: write
    
    # Use the official GitHub Pages deployment action
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: './'
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
